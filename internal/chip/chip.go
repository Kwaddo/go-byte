package chip8

import (
	inf "chip8/internal/constants"
	"time"

	"github.com/veandco/go-sdl2/sdl"
)

type Chip8 struct {
	Memory     [4096]byte
	Vreg       [16]byte
	Index      uint16
	Pc         uint16
	Gfx        [64 * 32]byte
	DelayTimer byte
	SoundTimer byte
	Stack      [16]uint16
	Sp         uint16
	Keys       [16]byte
	Window     *sdl.Window
	Renderer   *sdl.Renderer
	DrawFlag   bool
	CycleDelay time.Duration
	FrameDelay time.Duration
}

var fontset = [80]byte{
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80, // F
}

func NewChip8() *Chip8 {
	cd := time.Second / time.Duration(inf.CpuSpeed)
	fd := time.Second / time.Duration(inf.FrameRate)
	chip8 := &Chip8{
		Pc: 0x200,
		CycleDelay: cd,
		FrameDelay: fd,
	}

	// Load fontset
	for i := 0; i < 80; i++ {
		chip8.Memory[i] = fontset[i]
	}

	return chip8
}